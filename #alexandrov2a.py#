import os
import pandas as pd
import numpy as np
from sklearn.preprocessing import normalize
import nimfa
import argparse

# import private scripts
import load_kmer_cnts_jf
import stats_utils_AEB

#plotting
import matplotlib.pyplot as plt
plt.switch_backend('Agg') # this suppresses the console for plotting                                                        
import seaborn as sns

#Figure function
def alexandrov(data, max_factor, title):
    
    fig, ax1 = plt.subplots()
    plt.xlabel('Number of Kmer signatures')
    ax2 = ax1.twinx() 
    ax1.set_ylabel('stability', color = 'red')
    ax2.set_ylabel('reconstruction error', color = 'blue')
    
    for i in range(2, max_factor):
        nmf = nimfa.Nmf(
            data.T,
            rank = i,
            max_iter = 1000,
            n_run = 50,
            track_factor = True
            )
        nmf_fit = nmf()
    
        sm = nmf_fit.summary()
        coph = sm['cophenetic']
        recon_err = sm['rss']
    
        ax1.scatter(i, coph, color = 'r')
        ax2.scatter(i, recon_err, color = 'b')
        
    plt.savefig("/pollard/home/abustion/deep_learning_microbiome/analysis/NMF/alexandrov" + 
                str(title) + 
                ".png")
    
if __name__ == '__main__':    
    parser = argparse.ArgumentParser(description= "Program to create NMF recon/stab figures")
    parser.add_argument('-ds', type = list, default = ['LiverCirrhosis'], help = "Data set")
    parser.add_argument('-k', type = int, default = 5, help = "Kmer Size")

    arg_vals = parser.parse_args()
    data_set = arg_vals.ds
    kmer_size = arg_vals.k

allowed_labels = ['0', '1']
kmer_cnts, accessions, labelz, domain_labels = load_kmer_cnts_jf.load_kmers(kmer_size,
                                                                            data_set,
                                                                            allowed_labels)

print("LOADED DATASET " + str(data_set[0]) + ": " + str(len(kmer_cnts)) + " SAMPLES")
labelz=np.asarray(labelz)
labelz=labelz.astype(np.int)
data_normalized = normalize(kmer_cnts, axis = 1, norm = 'l1')

alexandrov(data=data_normalized, max_factor=100, title = (str(data_set) + str(kmer_size)))